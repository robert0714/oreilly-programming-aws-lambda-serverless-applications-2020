provider "aws" {
}

resource "aws_dynamodb_table" "locations_table" {
  name         = "LocationsTable"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "locationName"

  attribute {
    name = "locationName"
    type = "S"
  }
}

resource "aws_iam_role" "lambda_role" {
  name = "lambda_exec_role"

  assume_role_policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Action" : "sts:AssumeRole",
        "Effect" : "Allow",
        "Principal" : {
          "Service" : "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_policy" "dynamodb_crud_policy" {
  name = "dynamodb_crud_policy"
  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Action" : [
          "dynamodb:PutItem",
          "dynamodb:GetItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem"
        ],
        "Effect" : "Allow",
        "Resource" : aws_dynamodb_table.locations_table.arn
      }
    ]
  })
}

resource "aws_iam_policy" "dynamodb_read_policy" {
  name = "dynamodb_read_policy"
  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Action" : [
          "dynamodb:GetItem",
          "dynamodb:Scan",
          "dynamodb:Query"
        ],
        "Effect" : "Allow",
        "Resource" : aws_dynamodb_table.locations_table.arn
      }
    ]
  })
}

resource "aws_lambda_function" "weather_event_lambda" {
  function_name = "WeatherEventLambda"
  filename      = "target/lambda.zip"
  handler       = "book.api.WeatherEventLambda::handler"
  runtime       = "java17"
  memory_size   = 512
  timeout       = 25
  role          = aws_iam_role.lambda_role.arn

  environment {
    variables = {
      LOCATIONS_TABLE = aws_dynamodb_table.locations_table.name
    }
  }

  depends_on = [aws_iam_policy.dynamodb_crud_policy]


}

resource "aws_lambda_permission" "api_gw_post_permission" {
  statement_id  = "AllowExecutionFromApiGatewayPOST"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.weather_event_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.chapter5_api.execution_arn}/*/POST/events"
}

resource "aws_lambda_function" "weather_query_lambda" {
  function_name = "WeatherQueryLambda"
  filename      = "target/lambda.zip"
  handler       = "book.api.WeatherQueryLambda::handler"
  runtime       = "java17"
  memory_size   = 512
  timeout       = 25
  role          = aws_iam_role.lambda_role.arn

  environment {
    variables = {
      LOCATIONS_TABLE = aws_dynamodb_table.locations_table.name
    }
  }

  depends_on = [aws_iam_policy.dynamodb_read_policy]


}

resource "aws_api_gateway_rest_api" "chapter5_api" {
  name = "chapter5-api"
}

resource "aws_api_gateway_resource" "events" {
  rest_api_id = aws_api_gateway_rest_api.chapter5_api.id
  parent_id   = aws_api_gateway_rest_api.chapter5_api.root_resource_id
  path_part   = "events"
}

resource "aws_api_gateway_resource" "locations" {
  rest_api_id = aws_api_gateway_rest_api.chapter5_api.id
  parent_id   = aws_api_gateway_rest_api.chapter5_api.root_resource_id
  path_part   = "locations"
}

resource "aws_api_gateway_method" "post_method" {
  rest_api_id   = aws_api_gateway_rest_api.chapter5_api.id
  resource_id   = aws_api_gateway_resource.events.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_method" "get_method" {
  rest_api_id   = aws_api_gateway_rest_api.chapter5_api.id
  resource_id   = aws_api_gateway_resource.locations.id
  http_method   = "GET"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "weather_event_lambda_api_integration" {
  rest_api_id             = aws_api_gateway_rest_api.chapter5_api.id
  resource_id             = aws_api_gateway_resource.events.id
  http_method             = aws_api_gateway_method.post_method.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.weather_event_lambda.invoke_arn
}

resource "aws_api_gateway_integration" "weather_query_lambda_api_integration" {
  rest_api_id             = aws_api_gateway_rest_api.chapter5_api.id
  resource_id             = aws_api_gateway_resource.locations.id
  http_method             = aws_api_gateway_method.get_method.http_method
  integration_http_method = "GET"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.weather_query_lambda.invoke_arn
}

output "api_endpoint" {
  value = aws_api_gateway_rest_api.chapter5_api.execution_arn
}
